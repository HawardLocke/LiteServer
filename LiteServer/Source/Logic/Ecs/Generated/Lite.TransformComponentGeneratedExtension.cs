//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public Lite.TransformComponent transform { get { return (Lite.TransformComponent)GetComponent(CoreComponentIds.Transform); } }
        public bool hasTransform { get { return HasComponent(CoreComponentIds.Transform); } }

        public Entity AddTransform(Lite.Vector2 newPosition, float newAngle) {
            var component = CreateComponent<Lite.TransformComponent>(CoreComponentIds.Transform);
            component.position = newPosition;
            component.angle = newAngle;
            return AddComponent(CoreComponentIds.Transform, component);
        }

        public Entity ReplaceTransform(Lite.Vector2 newPosition, float newAngle) {
            var component = CreateComponent<Lite.TransformComponent>(CoreComponentIds.Transform);
            component.position = newPosition;
            component.angle = newAngle;
            ReplaceComponent(CoreComponentIds.Transform, component);
            return this;
        }

        public Entity RemoveTransform() {
            return RemoveComponent(CoreComponentIds.Transform);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherTransform;

        public static IMatcher Transform {
            get {
                if(_matcherTransform == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Transform);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherTransform = matcher;
                }

                return _matcherTransform;
            }
        }
    }

    public partial class GameObjectsMatcher {

        static IMatcher _matcherTransform;

        public static IMatcher Transform {
            get {
                if(_matcherTransform == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameObjectsComponentIds.Transform);
                    matcher.componentNames = GameObjectsComponentIds.componentNames;
                    _matcherTransform = matcher;
                }

                return _matcherTransform;
            }
        }
    }
