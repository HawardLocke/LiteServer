// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/chat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LiteServer {

  /// <summary>Holder for reflection information generated from protos/chat.proto</summary>
  public static partial class ChatReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvY2hhdC5wcm90bxIKTGl0ZVNlcnZlciI8CglUZXN0MU1zZzES",
            "DAoEdGV4dBgBIAEoCRIOCgZudW1iZXIYAiABKAUSEQoJYmlnbnVtYmVyGAMg",
            "ASgDIjwKCVRlc3QxTXNnMhIMCgR0ZXh0GAEgASgJEg4KBm51bWJlchgCIAEo",
            "BRIRCgliaWdudW1iZXIYAyABKAMiPAoJVGVzdDFNc2czEgwKBHRleHQYASAB",
            "KAkSDgoGbnVtYmVyGAIgASgFEhEKCWJpZ251bWJlchgDIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LiteServer.Test1Msg1), global::LiteServer.Test1Msg1.Parser, new[]{ "Text", "Number", "Bignumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiteServer.Test1Msg2), global::LiteServer.Test1Msg2.Parser, new[]{ "Text", "Number", "Bignumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiteServer.Test1Msg3), global::LiteServer.Test1Msg3.Parser, new[]{ "Text", "Number", "Bignumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Test1Msg1 : pb::IMessage<Test1Msg1> {
    private static readonly pb::MessageParser<Test1Msg1> _parser = new pb::MessageParser<Test1Msg1>(() => new Test1Msg1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test1Msg1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiteServer.ChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg1(Test1Msg1 other) : this() {
      text_ = other.text_;
      number_ = other.number_;
      bignumber_ = other.bignumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg1 Clone() {
      return new Test1Msg1(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "bignumber" field.</summary>
    public const int BignumberFieldNumber = 3;
    private long bignumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bignumber {
      get { return bignumber_; }
      set {
        bignumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test1Msg1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test1Msg1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Number != other.Number) return false;
      if (Bignumber != other.Bignumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Bignumber != 0L) hash ^= Bignumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Bignumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bignumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Bignumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bignumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test1Msg1 other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Bignumber != 0L) {
        Bignumber = other.Bignumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 24: {
            Bignumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Test1Msg2 : pb::IMessage<Test1Msg2> {
    private static readonly pb::MessageParser<Test1Msg2> _parser = new pb::MessageParser<Test1Msg2>(() => new Test1Msg2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test1Msg2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiteServer.ChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg2(Test1Msg2 other) : this() {
      text_ = other.text_;
      number_ = other.number_;
      bignumber_ = other.bignumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg2 Clone() {
      return new Test1Msg2(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "bignumber" field.</summary>
    public const int BignumberFieldNumber = 3;
    private long bignumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bignumber {
      get { return bignumber_; }
      set {
        bignumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test1Msg2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test1Msg2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Number != other.Number) return false;
      if (Bignumber != other.Bignumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Bignumber != 0L) hash ^= Bignumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Bignumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bignumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Bignumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bignumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test1Msg2 other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Bignumber != 0L) {
        Bignumber = other.Bignumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 24: {
            Bignumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Test1Msg3 : pb::IMessage<Test1Msg3> {
    private static readonly pb::MessageParser<Test1Msg3> _parser = new pb::MessageParser<Test1Msg3>(() => new Test1Msg3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test1Msg3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiteServer.ChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg3(Test1Msg3 other) : this() {
      text_ = other.text_;
      number_ = other.number_;
      bignumber_ = other.bignumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test1Msg3 Clone() {
      return new Test1Msg3(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "bignumber" field.</summary>
    public const int BignumberFieldNumber = 3;
    private long bignumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bignumber {
      get { return bignumber_; }
      set {
        bignumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test1Msg3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test1Msg3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Number != other.Number) return false;
      if (Bignumber != other.Bignumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Bignumber != 0L) hash ^= Bignumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Bignumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bignumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Bignumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bignumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test1Msg3 other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Bignumber != 0L) {
        Bignumber = other.Bignumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 24: {
            Bignumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
