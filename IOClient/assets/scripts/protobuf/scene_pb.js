/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Protocol.csCollectEnergyBall', null, global);
goog.exportSymbol('proto.Protocol.csJoin', null, global);
goog.exportSymbol('proto.Protocol.csMoveTowards', null, global);
goog.exportSymbol('proto.Protocol.csPing', null, global);
goog.exportSymbol('proto.Protocol.csShoot', null, global);
goog.exportSymbol('proto.Protocol.scBulletInfo', null, global);
goog.exportSymbol('proto.Protocol.scCollectEnergyBall', null, global);
goog.exportSymbol('proto.Protocol.scEnergyBallInfo', null, global);
goog.exportSymbol('proto.Protocol.scEnergyChange', null, global);
goog.exportSymbol('proto.Protocol.scHitPlayer', null, global);
goog.exportSymbol('proto.Protocol.scMovementInfo', null, global);
goog.exportSymbol('proto.Protocol.scPing', null, global);
goog.exportSymbol('proto.Protocol.scPlayerInfo', null, global);
goog.exportSymbol('proto.Protocol.scPlayerJoined', null, global);
goog.exportSymbol('proto.Protocol.scPlayerMove', null, global);
goog.exportSymbol('proto.Protocol.scPlayerQuit', null, global);
goog.exportSymbol('proto.Protocol.scSceneInfo', null, global);
goog.exportSymbol('proto.Protocol.scShoot', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scMovementInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scMovementInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scMovementInfo.displayName = 'proto.Protocol.scMovementInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scMovementInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scMovementInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scMovementInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scMovementInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    vx: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    vy: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    fx: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    fy: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scMovementInfo}
 */
proto.Protocol.scMovementInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scMovementInfo;
  return proto.Protocol.scMovementInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scMovementInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scMovementInfo}
 */
proto.Protocol.scMovementInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scMovementInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scMovementInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scMovementInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scMovementInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getVx();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getVy();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getFx();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getFy();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Protocol.scMovementInfo.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Protocol.scMovementInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Protocol.scMovementInfo.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Protocol.scMovementInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float vx = 3;
 * @return {number}
 */
proto.Protocol.scMovementInfo.prototype.getVx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Protocol.scMovementInfo.prototype.setVx = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float vy = 4;
 * @return {number}
 */
proto.Protocol.scMovementInfo.prototype.getVy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Protocol.scMovementInfo.prototype.setVy = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float fx = 5;
 * @return {number}
 */
proto.Protocol.scMovementInfo.prototype.getFx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Protocol.scMovementInfo.prototype.setFx = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float fy = 6;
 * @return {number}
 */
proto.Protocol.scMovementInfo.prototype.getFy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Protocol.scMovementInfo.prototype.setFy = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scPlayerInfo.displayName = 'proto.Protocol.scPlayerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    movement: (f = msg.getMovement()) && proto.Protocol.scMovementInfo.toObject(includeInstance, f),
    energy: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scPlayerInfo}
 */
proto.Protocol.scPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scPlayerInfo;
  return proto.Protocol.scPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scPlayerInfo}
 */
proto.Protocol.scPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.Protocol.scMovementInfo;
      reader.readMessage(value,proto.Protocol.scMovementInfo.deserializeBinaryFromReader);
      msg.setMovement(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnergy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMovement();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Protocol.scMovementInfo.serializeBinaryToWriter
    );
  }
  f = this.getEnergy();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int64 guid = 1;
 * @return {number}
 */
proto.Protocol.scPlayerInfo.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scPlayerInfo.prototype.setGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Protocol.scPlayerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protocol.scPlayerInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional scMovementInfo movement = 3;
 * @return {?proto.Protocol.scMovementInfo}
 */
proto.Protocol.scPlayerInfo.prototype.getMovement = function() {
  return /** @type{?proto.Protocol.scMovementInfo} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.scMovementInfo, 3));
};


/** @param {?proto.Protocol.scMovementInfo|undefined} value */
proto.Protocol.scPlayerInfo.prototype.setMovement = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Protocol.scPlayerInfo.prototype.clearMovement = function() {
  this.setMovement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.scPlayerInfo.prototype.hasMovement = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 energy = 6;
 * @return {number}
 */
proto.Protocol.scPlayerInfo.prototype.getEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Protocol.scPlayerInfo.prototype.setEnergy = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scSceneInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scSceneInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scSceneInfo.displayName = 'proto.Protocol.scSceneInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scSceneInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scSceneInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scSceneInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scSceneInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scSceneInfo}
 */
proto.Protocol.scSceneInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scSceneInfo;
  return proto.Protocol.scSceneInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scSceneInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scSceneInfo}
 */
proto.Protocol.scSceneInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scSceneInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scSceneInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scSceneInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scSceneInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.Protocol.scSceneInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scSceneInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.Protocol.scSceneInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scSceneInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scEnergyBallInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scEnergyBallInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scEnergyBallInfo.displayName = 'proto.Protocol.scEnergyBallInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scEnergyBallInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scEnergyBallInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scEnergyBallInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scEnergyBallInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    energy: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scEnergyBallInfo}
 */
proto.Protocol.scEnergyBallInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scEnergyBallInfo;
  return proto.Protocol.scEnergyBallInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scEnergyBallInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scEnergyBallInfo}
 */
proto.Protocol.scEnergyBallInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnergy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scEnergyBallInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scEnergyBallInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scEnergyBallInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scEnergyBallInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEnergy();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional int32 energy = 1;
 * @return {number}
 */
proto.Protocol.scEnergyBallInfo.prototype.getEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scEnergyBallInfo.prototype.setEnergy = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.Protocol.scEnergyBallInfo.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Protocol.scEnergyBallInfo.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.Protocol.scEnergyBallInfo.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Protocol.scEnergyBallInfo.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scBulletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scBulletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scBulletInfo.displayName = 'proto.Protocol.scBulletInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scBulletInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scBulletInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scBulletInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scBulletInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    movement: (f = msg.getMovement()) && proto.Protocol.scMovementInfo.toObject(includeInstance, f),
    playerguid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bulletid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scBulletInfo}
 */
proto.Protocol.scBulletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scBulletInfo;
  return proto.Protocol.scBulletInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scBulletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scBulletInfo}
 */
proto.Protocol.scBulletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protocol.scMovementInfo;
      reader.readMessage(value,proto.Protocol.scMovementInfo.deserializeBinaryFromReader);
      msg.setMovement(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayerguid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBulletid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scBulletInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scBulletInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scBulletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scBulletInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMovement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protocol.scMovementInfo.serializeBinaryToWriter
    );
  }
  f = this.getPlayerguid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getBulletid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional scMovementInfo movement = 1;
 * @return {?proto.Protocol.scMovementInfo}
 */
proto.Protocol.scBulletInfo.prototype.getMovement = function() {
  return /** @type{?proto.Protocol.scMovementInfo} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.scMovementInfo, 1));
};


/** @param {?proto.Protocol.scMovementInfo|undefined} value */
proto.Protocol.scBulletInfo.prototype.setMovement = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Protocol.scBulletInfo.prototype.clearMovement = function() {
  this.setMovement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.scBulletInfo.prototype.hasMovement = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 playerGuid = 2;
 * @return {number}
 */
proto.Protocol.scBulletInfo.prototype.getPlayerguid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scBulletInfo.prototype.setPlayerguid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 bulletId = 3;
 * @return {number}
 */
proto.Protocol.scBulletInfo.prototype.getBulletid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protocol.scBulletInfo.prototype.setBulletid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.Protocol.scBulletInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Protocol.scBulletInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.csJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.csJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.csJoin.displayName = 'proto.Protocol.csJoin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.csJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.csJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.csJoin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.csJoin.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.csJoin}
 */
proto.Protocol.csJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.csJoin;
  return proto.Protocol.csJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.csJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.csJoin}
 */
proto.Protocol.csJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.csJoin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csJoin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.csJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csJoin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scPlayerJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scPlayerJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scPlayerJoined.displayName = 'proto.Protocol.scPlayerJoined';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scPlayerJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scPlayerJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scPlayerJoined} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scPlayerJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerinfo: (f = msg.getPlayerinfo()) && proto.Protocol.scPlayerInfo.toObject(includeInstance, f),
    ext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scPlayerJoined}
 */
proto.Protocol.scPlayerJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scPlayerJoined;
  return proto.Protocol.scPlayerJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scPlayerJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scPlayerJoined}
 */
proto.Protocol.scPlayerJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protocol.scPlayerInfo;
      reader.readMessage(value,proto.Protocol.scPlayerInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scPlayerJoined} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerJoined.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scPlayerJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerJoined.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protocol.scPlayerInfo.serializeBinaryToWriter
    );
  }
  f = this.getExt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional scPlayerInfo playerInfo = 1;
 * @return {?proto.Protocol.scPlayerInfo}
 */
proto.Protocol.scPlayerJoined.prototype.getPlayerinfo = function() {
  return /** @type{?proto.Protocol.scPlayerInfo} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.scPlayerInfo, 1));
};


/** @param {?proto.Protocol.scPlayerInfo|undefined} value */
proto.Protocol.scPlayerJoined.prototype.setPlayerinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Protocol.scPlayerJoined.prototype.clearPlayerinfo = function() {
  this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.scPlayerJoined.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ext = 2;
 * @return {string}
 */
proto.Protocol.scPlayerJoined.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Protocol.scPlayerJoined.prototype.setExt = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scPlayerQuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scPlayerQuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scPlayerQuit.displayName = 'proto.Protocol.scPlayerQuit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scPlayerQuit.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scPlayerQuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scPlayerQuit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scPlayerQuit.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scPlayerQuit}
 */
proto.Protocol.scPlayerQuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scPlayerQuit;
  return proto.Protocol.scPlayerQuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scPlayerQuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scPlayerQuit}
 */
proto.Protocol.scPlayerQuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scPlayerQuit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerQuit.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scPlayerQuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerQuit.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 guid = 1;
 * @return {number}
 */
proto.Protocol.scPlayerQuit.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scPlayerQuit.prototype.setGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.csMoveTowards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.csMoveTowards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.csMoveTowards.displayName = 'proto.Protocol.csMoveTowards';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.csMoveTowards.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.csMoveTowards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.csMoveTowards} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.csMoveTowards.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.csMoveTowards}
 */
proto.Protocol.csMoveTowards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.csMoveTowards;
  return proto.Protocol.csMoveTowards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.csMoveTowards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.csMoveTowards}
 */
proto.Protocol.csMoveTowards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.csMoveTowards} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csMoveTowards.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.csMoveTowards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csMoveTowards.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Protocol.csMoveTowards.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Protocol.csMoveTowards.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Protocol.csMoveTowards.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Protocol.csMoveTowards.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scPlayerMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scPlayerMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scPlayerMove.displayName = 'proto.Protocol.scPlayerMove';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scPlayerMove.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scPlayerMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scPlayerMove} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scPlayerMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    movement: (f = msg.getMovement()) && proto.Protocol.scMovementInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scPlayerMove}
 */
proto.Protocol.scPlayerMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scPlayerMove;
  return proto.Protocol.scPlayerMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scPlayerMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scPlayerMove}
 */
proto.Protocol.scPlayerMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protocol.scMovementInfo;
      reader.readMessage(value,proto.Protocol.scMovementInfo.deserializeBinaryFromReader);
      msg.setMovement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scPlayerMove} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerMove.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scPlayerMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPlayerMove.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMovement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protocol.scMovementInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional scMovementInfo movement = 1;
 * @return {?proto.Protocol.scMovementInfo}
 */
proto.Protocol.scPlayerMove.prototype.getMovement = function() {
  return /** @type{?proto.Protocol.scMovementInfo} */ (
    jspb.Message.getWrapperField(this, proto.Protocol.scMovementInfo, 1));
};


/** @param {?proto.Protocol.scMovementInfo|undefined} value */
proto.Protocol.scPlayerMove.prototype.setMovement = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Protocol.scPlayerMove.prototype.clearMovement = function() {
  this.setMovement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Protocol.scPlayerMove.prototype.hasMovement = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.csPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.csPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.csPing.displayName = 'proto.Protocol.csPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.csPing.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.csPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.csPing} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.csPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    clienttime: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.csPing}
 */
proto.Protocol.csPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.csPing;
  return proto.Protocol.csPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.csPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.csPing}
 */
proto.Protocol.csPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClienttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.csPing} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csPing.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.csPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csPing.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClienttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 clientTime = 1;
 * @return {number}
 */
proto.Protocol.csPing.prototype.getClienttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.csPing.prototype.setClienttime = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scPing.displayName = 'proto.Protocol.scPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scPing.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scPing} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    pingcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    delay: jspb.Message.getFieldWithDefault(msg, 2, 0),
    servertime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scPing}
 */
proto.Protocol.scPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scPing;
  return proto.Protocol.scPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scPing}
 */
proto.Protocol.scPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPingcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDelay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServertime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scPing} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPing.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scPing.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPingcount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getDelay();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getServertime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 pingCount = 1;
 * @return {number}
 */
proto.Protocol.scPing.prototype.getPingcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scPing.prototype.setPingcount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 delay = 2;
 * @return {number}
 */
proto.Protocol.scPing.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scPing.prototype.setDelay = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 serverTime = 3;
 * @return {number}
 */
proto.Protocol.scPing.prototype.getServertime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protocol.scPing.prototype.setServertime = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.csCollectEnergyBall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.csCollectEnergyBall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.csCollectEnergyBall.displayName = 'proto.Protocol.csCollectEnergyBall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.csCollectEnergyBall.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.csCollectEnergyBall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.csCollectEnergyBall} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.csCollectEnergyBall.toObject = function(includeInstance, msg) {
  var f, obj = {
    ballid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.csCollectEnergyBall}
 */
proto.Protocol.csCollectEnergyBall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.csCollectEnergyBall;
  return proto.Protocol.csCollectEnergyBall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.csCollectEnergyBall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.csCollectEnergyBall}
 */
proto.Protocol.csCollectEnergyBall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.csCollectEnergyBall} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csCollectEnergyBall.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.csCollectEnergyBall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csCollectEnergyBall.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBallid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ballId = 1;
 * @return {number}
 */
proto.Protocol.csCollectEnergyBall.prototype.getBallid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.csCollectEnergyBall.prototype.setBallid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scCollectEnergyBall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scCollectEnergyBall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scCollectEnergyBall.displayName = 'proto.Protocol.scCollectEnergyBall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scCollectEnergyBall.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scCollectEnergyBall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scCollectEnergyBall} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scCollectEnergyBall.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerguid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ballid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scCollectEnergyBall}
 */
proto.Protocol.scCollectEnergyBall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scCollectEnergyBall;
  return proto.Protocol.scCollectEnergyBall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scCollectEnergyBall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scCollectEnergyBall}
 */
proto.Protocol.scCollectEnergyBall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayerguid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scCollectEnergyBall} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scCollectEnergyBall.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scCollectEnergyBall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scCollectEnergyBall.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerguid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getBallid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 playerGuid = 1;
 * @return {number}
 */
proto.Protocol.scCollectEnergyBall.prototype.getPlayerguid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scCollectEnergyBall.prototype.setPlayerguid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 ballId = 2;
 * @return {number}
 */
proto.Protocol.scCollectEnergyBall.prototype.getBallid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scCollectEnergyBall.prototype.setBallid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scEnergyChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scEnergyChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scEnergyChange.displayName = 'proto.Protocol.scEnergyChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scEnergyChange.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scEnergyChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scEnergyChange} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scEnergyChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerguid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newenergy: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scEnergyChange}
 */
proto.Protocol.scEnergyChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scEnergyChange;
  return proto.Protocol.scEnergyChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scEnergyChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scEnergyChange}
 */
proto.Protocol.scEnergyChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayerguid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewenergy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scEnergyChange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scEnergyChange.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scEnergyChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scEnergyChange.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerguid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getNewenergy();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 playerGuid = 1;
 * @return {number}
 */
proto.Protocol.scEnergyChange.prototype.getPlayerguid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scEnergyChange.prototype.setPlayerguid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 newEnergy = 2;
 * @return {number}
 */
proto.Protocol.scEnergyChange.prototype.getNewenergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scEnergyChange.prototype.setNewenergy = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.csShoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.csShoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.csShoot.displayName = 'proto.Protocol.csShoot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.csShoot.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.csShoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.csShoot} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.csShoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.csShoot}
 */
proto.Protocol.csShoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.csShoot;
  return proto.Protocol.csShoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.csShoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.csShoot}
 */
proto.Protocol.csShoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.csShoot} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csShoot.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.csShoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.csShoot.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Protocol.csShoot.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Protocol.csShoot.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Protocol.csShoot.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Protocol.csShoot.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scShoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scShoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scShoot.displayName = 'proto.Protocol.scShoot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scShoot.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scShoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scShoot} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scShoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerguid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bulletid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    x: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    vx: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    vy: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scShoot}
 */
proto.Protocol.scShoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scShoot;
  return proto.Protocol.scShoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scShoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scShoot}
 */
proto.Protocol.scShoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayerguid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBulletid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scShoot} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scShoot.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scShoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scShoot.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerguid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getBulletid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = this.getVx();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getVy();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional int64 playerGuid = 1;
 * @return {number}
 */
proto.Protocol.scShoot.prototype.getPlayerguid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scShoot.prototype.setPlayerguid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 bulletId = 2;
 * @return {number}
 */
proto.Protocol.scShoot.prototype.getBulletid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scShoot.prototype.setBulletid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float x = 3;
 * @return {number}
 */
proto.Protocol.scShoot.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Protocol.scShoot.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float y = 4;
 * @return {number}
 */
proto.Protocol.scShoot.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Protocol.scShoot.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float vx = 5;
 * @return {number}
 */
proto.Protocol.scShoot.prototype.getVx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Protocol.scShoot.prototype.setVx = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float vy = 6;
 * @return {number}
 */
proto.Protocol.scShoot.prototype.getVy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Protocol.scShoot.prototype.setVy = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol.scHitPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protocol.scHitPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Protocol.scHitPlayer.displayName = 'proto.Protocol.scHitPlayer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.scHitPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.scHitPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol.scHitPlayer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Protocol.scHitPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerguid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bulletid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    damage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol.scHitPlayer}
 */
proto.Protocol.scHitPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol.scHitPlayer;
  return proto.Protocol.scHitPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol.scHitPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol.scHitPlayer}
 */
proto.Protocol.scHitPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayerguid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBulletid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Protocol.scHitPlayer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scHitPlayer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.scHitPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Protocol.scHitPlayer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPlayerguid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getBulletid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getDamage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 playerGuid = 1;
 * @return {number}
 */
proto.Protocol.scHitPlayer.prototype.getPlayerguid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Protocol.scHitPlayer.prototype.setPlayerguid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 bulletId = 2;
 * @return {number}
 */
proto.Protocol.scHitPlayer.prototype.getBulletid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Protocol.scHitPlayer.prototype.setBulletid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 damage = 3;
 * @return {number}
 */
proto.Protocol.scHitPlayer.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Protocol.scHitPlayer.prototype.setDamage = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.Protocol);
